{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["footerStyle","backgroundColor","fontSize","color","borderTop","textAlign","padding","position","left","bottom","height","width","phantomStyle","display","window","innerWidth","innerHeight","getWindowDimensions","App","props","state","posts","last_id","loader","show","handleChange","bind","ele","document","getElementById","classList","add","setTimeout","axios","get","then","res","data","setState","length","id","event","this","push","console","log","className","showSwipeHint","uncutPages","loopForever","showHint","onPageChange","orientation","animationDuration","pageBackground","style","map","page","key","src","image","objectFit","title","description","author_name","created_at","target","href","publisher_name","Icon","Show","React","Component","Boolean","location","hostname","match","ReactDOM","render","StrictMode","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.f5d11c76.chunk.js","sourcesContent":["import React from 'react';\nimport './App.css';\nimport FlipPage from 'react-flip-page'\nimport '@fortawesome/fontawesome-free/css/all.min.css'; \nimport \"./style.css\";\nimport axios from 'axios';\nimport Image from 'react-shimmer'\nimport ReactSnackBar from \"react-js-snackbar\";\n// https://codesandbox.io/s/qq7759m3lq?module=%2Fsrc%2FCarousel.js\n\nconst footerStyle = {\n  backgroundColor: \"purple\",\n  fontSize: \"20px\",\n  color: \"white\",\n  borderTop: \"1px solid #E7E7E7\",\n  textAlign: \"center\",\n  padding: \"20px\",\n  position: \"fixed\",\n  left: \"0\",\n  bottom: \"0\",\n  height: \"70px\",\n  width: \"100%\"\n};\n\nconst phantomStyle = {\n  display: \"block\",\n  padding: \"20px\",\n  height: \"60px\",\n  width: \"100%\"\n};\n\nconst { height, width } = getWindowDimensions();\nfunction getWindowDimensions() {\n  const { innerWidth: width, innerHeight: height } = window;\n  return {\n    width,\n    height\n  };\n}\nexport default class App extends React.Component { \n  constructor(props) {\n    super(props);\n    this.state = {\n    posts: [], last_id: \"\", loader: false, show: false\n  }\n  this.handleChange = this.handleChange.bind(this);\n  // this.handleSubmit = this.handleSubmit.bind(this);\n\n  }\n\ncomponentDidMount() {\n    const ele = document.getElementById('ipl-progress-indicator')\n    if(ele){\n      // fade out\n      ele.classList.add('available');\n      setTimeout(() => {\n        // remove from DOM\n      }, 10000)\n    }\n\n    axios.get(`https://stacklegacy.com/diggertech/load_posts`)\n      .then(res => {\n        const posts = res.data;\n        this.setState({ posts });\n        this.setState({loader: true, show: true});\n        this.setState({last_id: posts[posts.length-1].id});\n        // debugger;\n      })\n\n      setTimeout(() => {\n      this.setState({ show: false });\n    }, 3000);\n  }\n\n\nhandleChange(event) {\n  // ${this.state.id}\n  axios.get(`https://stacklegacy.com/diggertech/onchange/?id=${this.state.last_id}`)\n  .then(res => {\n    const posts = res.data;\n    this.setState({last_id: posts.id});\n    // this.state.posts.shift();\n    this.state.posts.push(posts);\n    // debugger;\n\n  })\n\n}\n\n\n// width={flipPageWidth}\n\n\nrender() {\n  console.log(this.state.posts)\n\n\n  return (\n    <div>\n       <div className=\"page-content\">  \n        <div className=\"news-container\">\n       <div className=\"news-feed\" id=\"content\">\n      \n      <FlipPage\n        className=\"page\"\n        showSwipeHint={this.state.loader}\n        uncutPages\n        loopForever=\"true\"\n        showHint={this.state.loader}\n        onPageChange={() => this.handleChange(27)}\n        orientation=\"horizontal\"\n        animationDuration=\"400\"\n        width={width+2}\n        pageBackground=\"#fffff\"       \n        height={height}\n      >\n\n      {(this.state.posts && this.state.loader) === false ?\n            <div className=\"card\" style={{ \"height\": height, \"width\":width}}>\n            <div className=\"shimmerBG media\"></div>\n            <div className=\"p-32\">\n              <div className=\"shimmerBG title-line\"></div>\n              <div className=\"shimmerBG title-line end\"></div>\n              <div className=\"shimmerBG content-line m-t-24\"></div>\n              <div className=\"shimmerBG content-line\"></div>\n              <div className=\"shimmerBG content-line\"></div>\n              <div className=\"shimmerBG content-line\"></div>\n              <div className=\"shimmerBG content-line\"></div>\n              <div className=\"shimmerBG content-line\"></div>\n              <div className=\"shimmerBG content-line\"></div><br/>\n              <div className=\"shimmerBG content-line\"></div>\n              <div className=\"shimmerBG content-line\"></div>\n              <div className=\"shimmerBG content-line end\"></div>\n            </div>\n          </div>\n       : \n\n        this.state.posts.map(page => (\n         \n          <div className=\"tinder--card\" style={{\"height\": height - 70}} key={page.id}>\n            <img src={page.image} width={width} height={307} style={{ objectFit: 'cover'}} />\n            <h3>{page.title}</h3>\n            <p>{page.description} {page.description.length <= 150 ? '' : '' }</p>\n            <div className=\"xyz\">                \n            <span id=\"likes_45\">Posted By </span> <b> {page.author_name} </b> On {page.created_at} <br />Read more at\n              <a target=\"_blank\" href=\"{page.url}\"> {page.publisher_name} </a><p></p><br/>\n          \n            </div>\n        </div>\n        ))}\n      </FlipPage>\n         <ReactSnackBar Icon={<span>ðŸ“°</span>} Show={this.state.show}>\n          Loaded, {this.state.posts.length + 90}+ feed, Keep reading!\n        </ReactSnackBar>\n      <div>\n      <div style={phantomStyle} />\n      <div style={footerStyle}></div>\n    </div>\n      </div>\n      </div>\n</div>\n  </div>\n);\n}\n}","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}